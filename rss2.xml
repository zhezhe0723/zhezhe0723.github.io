<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>可可托海</title>
    <link>http://zhezhe0723.github.io/</link>
    
    <atom:link href="http://zhezhe0723.github.io/rss2.xml" rel="self" type="application/rss+xml"/>
    
    <description>尘埃落定之前，你我皆是黑马</description>
    <pubDate>Mon, 31 Oct 2022 16:32:45 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>vue-组件间传值</title>
      <link>http://zhezhe0723.github.io/2022/10/31/vue-zu-jian-jian-chuan-zhi/</link>
      <guid>http://zhezhe0723.github.io/2022/10/31/vue-zu-jian-jian-chuan-zhi/</guid>
      <pubDate>Mon, 31 Oct 2022 14:42:49 GMT</pubDate>
      
        
        
      <description>&lt;h3 id=&quot;vue-组件间传值&quot;&gt;&lt;a href=&quot;#vue-组件间传值&quot; class=&quot;headerlink&quot; title=&quot;vue 组件间传值&quot;&gt;&lt;/a&gt;vue 组件间传值&lt;/h3&gt;&lt;p&gt;一、父组件向子组件传值–详细讲解（自定义属性）&lt;/p&gt;
&lt;p&gt;首先子组件顾名思义就是</description>
        
      
      
      
      <content:encoded><![CDATA[<h3 id="vue-组件间传值"><a href="#vue-组件间传值" class="headerlink" title="vue 组件间传值"></a>vue 组件间传值</h3><p>一、父组件向子组件传值–详细讲解（自定义属性）</p><p>首先子组件顾名思义就是在一个组件中利用 **components:**包含 Vue 实例可用组件的哈希表,简而言之就是用来注册组件的，一个组件能够生效，必须通过一下步骤：</p><ol><li>使用 <strong>import</strong>  引入组件    <code>import myForm from &#39;@/pages/my-form&#39;</code></li><li>用 <strong>components</strong>  来注册这个组件  <code> components:&#123;myForm&#125;</code></li><li>在<strong>template</strong> 中使用这个组件  <code> &lt;my-form&gt;&lt;/my-form&gt;</code></li></ol><p>下面如何通过自定义属性的方式，把父组件中的值传给子组件？</p><p>需求：把父组件中的<strong>title</strong>  传给子组件</p><ol><li><p>在父组件中的<strong>data</strong>  中定义 </p><pre class="line-numbers language-js" data-language="js"><code class="language-js">exprot <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>  <span class="token function">data</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>     <span class="token keyword">return</span><span class="token punctuation">&#123;</span>       <span class="token literal-property property">title</span><span class="token operator">:</span><span class="token string">'组件传值'</span>     <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>在子组件上通过自定义属性的方式把<strong>title</strong>值绑定到子组件上</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>my-form</span>  <span class="token attr-name">:title</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>title<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>my-form</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>这时候，<strong>title</strong>值已经传给子组件了，现在需要子组件通过 <strong>props</strong>  属性  来接收 <strong>title</strong>  值</p><pre class="line-numbers language-none"><code class="language-none">exprot default &#123;  props:[&quot;title&quot;]&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>这个时候就可以直接把 <strong>title</strong>值拿来用了,这里使用模板字符串来展示</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>view</span><span class="token punctuation">></span></span>&#123;&#123;title&#125;&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>view</span><span class="token punctuation">></span></span>  //页面上会显示   组件传值<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol><p>二、子组件向父组件传值–详细讲解  （自定义事件）</p><p><strong>首先还是需要把子组件引入父组件中，方法同上！！！</strong></p><p>需求：把子组件中的值传给父组件</p><ol><li><p>在子组件中使用 <strong>this.$emit(‘事件’，值)</strong>  ，事件：就是在父组件中使用的函数，值：就是子组件向父组件传递的参数</p><pre class="line-numbers language-js" data-language="js"><code class="language-js">exprot <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>  <span class="token function">data</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>     <span class="token keyword">return</span><span class="token punctuation">&#123;</span>       <span class="token literal-property property">title</span><span class="token operator">:</span><span class="token string">'子传父'</span>     <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token function">created</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">eventEmit</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token literal-property property">methods</span><span class="token operator">:</span><span class="token punctuation">&#123;</span>    <span class="token function">eventEmit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$emit</span><span class="token punctuation">(</span><span class="token string">'addCount'</span><span class="token punctuation">,</span>title<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>在父组件中子组件引用出使用 <code>@addCount=&quot;add&quot;</code>     注意：<strong>addCount</strong>  必须和子组件中定义的一样，<strong>add</strong>可以一样也可以不一样，看个人习惯， </p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>my-form</span>  <span class="token attr-name">:title</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>title<span class="token punctuation">"</span></span> <span class="token attr-name">@addCount</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>add<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>my-form</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>最后就是把这个方法写到方法体内，</p><pre class="line-numbers language-none"><code class="language-none">exprot default &#123;  data ()&#123;     return&#123;     &#125;  &#125;,  methods:&#123;    add(value)&#123;      console.log(value)  &#x2F;&#x2F;&#x3D;&gt; 子传父    &#125;  &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><blockquote><p>以上两种方法是基本的组件间传值的方法，组件间传值还有多种方法，还在学习中！！！</p></blockquote>]]></content:encoded>
      
      
      <category domain="http://zhezhe0723.github.io/categories/%E7%BB%84%E4%BB%B6%E4%BC%A0%E5%80%BC/">组件传值</category>
      
      
      <category domain="http://zhezhe0723.github.io/tags/vue/">vue</category>
      
      
      <comments>http://zhezhe0723.github.io/2022/10/31/vue-zu-jian-jian-chuan-zhi/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>js-封装常用的方法</title>
      <link>http://zhezhe0723.github.io/2022/09/07/js-zhong-guo-biao-zhun-shi-jian-zhuan-hua-wei-nian-yue-ri-shi-fen-miao/</link>
      <guid>http://zhezhe0723.github.io/2022/09/07/js-zhong-guo-biao-zhun-shi-jian-zhuan-hua-wei-nian-yue-ri-shi-fen-miao/</guid>
      <pubDate>Wed, 07 Sep 2022 10:13:28 GMT</pubDate>
      
        
        
      <description>&lt;h3 id=&quot;js-中国标准时间转化为年月日时分秒&quot;&gt;&lt;a href=&quot;#js-中国标准时间转化为年月日时分秒&quot; class=&quot;headerlink&quot; title=&quot;js-中国标准时间转化为年月日时分秒&quot;&gt;&lt;/a&gt;js-中国标准时间转化为年月日时分秒&lt;/h3&gt;&lt;pre clas</description>
        
      
      
      
      <content:encoded><![CDATA[<h3 id="js-中国标准时间转化为年月日时分秒"><a href="#js-中国标准时间转化为年月日时分秒" class="headerlink" title="js-中国标准时间转化为年月日时分秒"></a>js-中国标准时间转化为年月日时分秒</h3><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token function">created</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">// 中国标准时间</span><span class="token keyword">let</span> myTime <span class="token operator">=</span> <span class="token string">"Wed Feb 16 2022 00:00:00 GMT+0800"</span><span class="token punctuation">;</span><span class="token keyword">let</span> newTime <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">filterTime</span><span class="token punctuation">(</span> myTime<span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>newTime<span class="token punctuation">)</span> <span class="token comment">// 2022-02-16 00:00:00</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token literal-property property">methods</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token function">filterTime</span><span class="token punctuation">(</span><span class="token parameter">time</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">let</span> date <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span>time<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">let</span> y <span class="token operator">=</span> date<span class="token punctuation">.</span><span class="token function">getFullYear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">let</span> m <span class="token operator">=</span> date<span class="token punctuation">.</span><span class="token function">getMonth</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>        m <span class="token operator">=</span> m <span class="token operator">&lt;</span> <span class="token number">10</span> <span class="token operator">?</span> <span class="token string">"0"</span> <span class="token operator">+</span> m <span class="token operator">:</span> m<span class="token punctuation">;</span>        <span class="token keyword">let</span> d <span class="token operator">=</span> date<span class="token punctuation">.</span><span class="token function">getDate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        d <span class="token operator">=</span> d <span class="token operator">&lt;</span> <span class="token number">10</span> <span class="token operator">?</span> <span class="token string">"0"</span> <span class="token operator">+</span> d <span class="token operator">:</span> d<span class="token punctuation">;</span>        <span class="token keyword">let</span> h <span class="token operator">=</span> date<span class="token punctuation">.</span><span class="token function">getHours</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        h <span class="token operator">=</span> h <span class="token operator">&lt;</span> <span class="token number">10</span> <span class="token operator">?</span> <span class="token string">"0"</span> <span class="token operator">+</span> h <span class="token operator">:</span> h<span class="token punctuation">;</span>        <span class="token keyword">let</span> minute <span class="token operator">=</span> date<span class="token punctuation">.</span><span class="token function">getMinutes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        minute <span class="token operator">=</span> minute <span class="token operator">&lt;</span> <span class="token number">10</span> <span class="token operator">?</span> <span class="token string">"0"</span> <span class="token operator">+</span> minute <span class="token operator">:</span> minute<span class="token punctuation">;</span>        <span class="token keyword">let</span> s <span class="token operator">=</span> date<span class="token punctuation">.</span><span class="token function">getSeconds</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        s <span class="token operator">=</span> s <span class="token operator">&lt;</span> <span class="token number">10</span> <span class="token operator">?</span> <span class="token string">"0"</span> <span class="token operator">+</span> s <span class="token operator">:</span> s<span class="token punctuation">;</span>        <span class="token keyword">return</span> y <span class="token operator">+</span> <span class="token string">"-"</span> <span class="token operator">+</span> m <span class="token operator">+</span> <span class="token string">"-"</span> <span class="token operator">+</span> d <span class="token operator">+</span> <span class="token string">" "</span> <span class="token operator">+</span> h <span class="token operator">+</span> <span class="token string">":"</span> <span class="token operator">+</span> minute <span class="token operator">+</span> <span class="token string">":"</span> <span class="token operator">+</span> s<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span>    <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content:encoded>
      
      
      <category domain="http://zhezhe0723.github.io/categories/js%E6%96%B9%E6%B3%95/">js方法</category>
      
      
      <category domain="http://zhezhe0723.github.io/tags/js/">js</category>
      
      
      <comments>http://zhezhe0723.github.io/2022/09/07/js-zhong-guo-biao-zhun-shi-jian-zhuan-hua-wei-nian-yue-ri-shi-fen-miao/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>js判断数组的方法</title>
      <link>http://zhezhe0723.github.io/2022/09/05/js-pan-duan-shu-zu-de-fang-fa/</link>
      <guid>http://zhezhe0723.github.io/2022/09/05/js-pan-duan-shu-zu-de-fang-fa/</guid>
      <pubDate>Mon, 05 Sep 2022 14:36:52 GMT</pubDate>
      
        
        
      <description>&lt;h3 id=&quot;js-判断数组的四种方法&quot;&gt;&lt;a href=&quot;#js-判断数组的四种方法&quot; class=&quot;headerlink&quot; title=&quot;js  判断数组的四种方法&quot;&gt;&lt;/a&gt;js  判断数组的四种方法&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;通过&lt;strong&gt;instanceof&lt;/</description>
        
      
      
      
      <content:encoded><![CDATA[<h3 id="js-判断数组的四种方法"><a href="#js-判断数组的四种方法" class="headerlink" title="js  判断数组的四种方法"></a>js  判断数组的四种方法</h3><ol><li>通过<strong>instanceof</strong>运算符用于检验构造函数的prototype 属性是否出现在对象的原型链中的任何位置，返回一个布尔值</li></ol><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">let</span> a <span class="token operator">=</span> arr <span class="token keyword">instanceof</span> <span class="token class-name">Array</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//true</span><span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">let</span> b <span class="token operator">=</span> obj <span class="token keyword">instanceof</span> <span class="token class-name">Array</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//false</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li>通过 <strong>constructor</strong> 判断</li></ol><p>实例的构造函数属性 constructor 指向构造函数，通过 constructor 属性可以判断是否为一个数组</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> arr <span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span>arr<span class="token punctuation">.</span>constructor <span class="token operator">===</span> Array<span class="token punctuation">;</span> <span class="token comment">//true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ol start="3"><li>通过 <strong>Object.prototype.toString.call()</strong> 进行判断</li></ol><p>Object.prototype.toString.call()  可以获取到对象的不同类型</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token string">'[object Array]'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ol start="4"><li>通过 <strong>Array.isArray()</strong>  判断</li></ol><p>Array.isArray() 用于确定传递的值是否是一个数组，返回值是布尔值</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span>Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><blockquote><p>有个问题是Array.isArray()是ES5新增的方法，目的就是提供一个稳定可用的数组判断方法，对于ES5之前不支持此方法的问题，我们其实可以做好兼容进行自行封装，如下：</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>Array<span class="token punctuation">.</span>isArray<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    Array<span class="token punctuation">.</span><span class="token function-variable function">isArray</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">argument</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> Object<span class="token punctuation">.</span>protutype<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>argument<span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token string">'[object Array]'</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote>]]></content:encoded>
      
      
      <category domain="http://zhezhe0723.github.io/categories/%E6%95%B0%E7%BB%84/">数组</category>
      
      
      <category domain="http://zhezhe0723.github.io/tags/js/">js</category>
      
      
      <comments>http://zhezhe0723.github.io/2022/09/05/js-pan-duan-shu-zu-de-fang-fa/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Scss的基本用法</title>
      <link>http://zhezhe0723.github.io/2022/08/22/scss-de-ji-ben-yong-fa-ru-men-pian/</link>
      <guid>http://zhezhe0723.github.io/2022/08/22/scss-de-ji-ben-yong-fa-ru-men-pian/</guid>
      <pubDate>Mon, 22 Aug 2022 07:45:16 GMT</pubDate>
      
        
        
      <description>&lt;h3 id=&quot;一、什么是Sass&quot;&gt;&lt;a href=&quot;#一、什么是Sass&quot; class=&quot;headerlink&quot; title=&quot;一、什么是Sass&quot;&gt;&lt;/a&gt;一、什么是Sass&lt;/h3&gt;&lt;p&gt;   Sass 是采用 Ruby 语言编写的一款 CSS 预处理语言，它诞生于200</description>
        
      
      
      
      <content:encoded><![CDATA[<h3 id="一、什么是Sass"><a href="#一、什么是Sass" class="headerlink" title="一、什么是Sass"></a>一、什么是Sass</h3><p>   Sass 是采用 Ruby 语言编写的一款 CSS 预处理语言，它诞生于2007年，是最大的成熟的 CSS 预处理语言。最初它是为了配合 HAML（一种缩进式 HTML 预编译器）而设计的，因此有着和 HTML 一样的缩进式风格。</p><h3 id="二、Sass和Scss的区别"><a href="#二、Sass和Scss的区别" class="headerlink" title="二、Sass和Scss的区别"></a>二、Sass和Scss的区别</h3><p>   Sass 和 SCSS 其实是同一种东西，我们平时都称之为 Sass，两者之间不同之处有以下两点：</p><blockquote><ol><li>文件扩展名不同。：Sass 是以“.sass”后缀为扩展名，而 SCSS 是以“.scss”后缀为扩展名。</li><li>语法书写方式不同。：Sass 是以严格的缩进式语法规则来书写，不带大括号( { } )和分号( ; )，而 SCSS 的语法书写和我们的 CSS 语法书写方式非常类似。</li></ol></blockquote><p><strong>示例：</strong></p><pre class="line-numbers language-scss" data-language="scss"><code class="language-scss"><span class="token comment">// Sass语法</span><span class="token property"><span class="token variable">$font-stac</span></span><span class="token punctuation">:</span> Helvetica<span class="token punctuation">,</span> sans-serif  <span class="token comment">//定义变量</span><span class="token property"><span class="token variable">$primary-color</span></span><span class="token punctuation">:</span> #333 <span class="token comment">//定义变量</span>body   <span class="token property">font</span><span class="token punctuation">:</span> 100% <span class="token variable">$font-stack</span><span class="token punctuation">;</span>  <span class="token property">color</span><span class="token punctuation">:</span> <span class="token variable">$primary-color</span><span class="token punctuation">;</span> <span class="token comment">// 没有 &#123;&#125; 和 ;</span><span class="token comment">// Scss语法</span><span class="token property"><span class="token variable">$font-stack</span></span><span class="token punctuation">:</span> Helvetica<span class="token punctuation">,</span> sans-serif<span class="token punctuation">;</span><span class="token property"><span class="token variable">$primary-color</span></span><span class="token punctuation">:</span> #333<span class="token punctuation">;</span><span class="token selector">body </span><span class="token punctuation">&#123;</span>  <span class="token property">font</span><span class="token punctuation">:</span> 100% <span class="token variable">$font-stack</span><span class="token punctuation">;</span>  <span class="token property">color</span><span class="token punctuation">:</span> <span class="token variable">$primary-color</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 编译出来的css</span><span class="token selector">body </span><span class="token punctuation">&#123;</span>  <span class="token property">font</span><span class="token punctuation">:</span> 100% Helvetica<span class="token punctuation">,</span> sans-serif<span class="token punctuation">;</span>  <span class="token property">color</span><span class="token punctuation">:</span> #333<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="三、Scss的基本语法"><a href="#三、Scss的基本语法" class="headerlink" title="三、Scss的基本语法"></a>三、Scss的基本语法</h3><blockquote><p><a href="https://www.sassmeister.com/">scss转css在线网址</a></p></blockquote><ol><li><p>声明变量 <strong>$</strong>   </p><p>$ 符号用于对变量进行声明。</p></li></ol><pre class="line-numbers language-scss" data-language="scss"><code class="language-scss"><span class="token comment">//Scss语法</span><span class="token property"><span class="token variable">$color</span></span><span class="token punctuation">:</span> #333<span class="token punctuation">;</span><span class="token selector">.a </span><span class="token punctuation">&#123;</span>    <span class="token property">color</span><span class="token punctuation">:</span> <span class="token variable">$color</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//编译出来的css语法</span><span class="token selector">.a </span><span class="token punctuation">&#123;</span>    <span class="token property">color</span><span class="token punctuation">:</span>#333<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li>默认变量 <strong>!default</strong></li></ol><p> 在Scss中设置默认变量，只需要在相应值的后面加上 <strong>!default</strong>  即可。</p><p>如果分配给变量的值后面添加了 <strong>!default</strong> 标志，这意味着该变量如果已经赋值，那么它不会被重新赋值，但是，如果他尚未赋值，那么他会被赋予新的给定值。<strong>默认的就是代表层级最低的</strong></p><ol start="3"><li><p>变量调用</p><p>直接调用即可。变量声明时也可以直接调用已经声明好的变量</p></li></ol><pre class="line-numbers language-scss" data-language="scss"><code class="language-scss"><span class="token comment">//Scss语法</span><span class="token property"><span class="token variable">$color</span></span><span class="token punctuation">:</span> #999<span class="token punctuation">;</span><span class="token property"><span class="token variable">$color1</span></span> <span class="token punctuation">:</span><span class="token variable">$color</span><span class="token punctuation">;</span> <span class="token selector">.a </span><span class="token punctuation">&#123;</span>    <span class="token property">color</span> <span class="token punctuation">:</span><span class="token variable">$color1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//css语法</span><span class="token selector">.a </span><span class="token punctuation">&#123;</span>  <span class="token property">color</span><span class="token punctuation">:</span> #999<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="4"><li>局部变量和<strong>全局变量</strong></li></ol><p>在元素内部定义的变量不会影响其他的元素</p><ol start="5"><li>嵌套</li></ol><ul><li>选择器嵌套：Sass 中还提供了选择器嵌套功能，但这也并不意味着你在 Sass 中的嵌套是无节制的，因为你嵌套的层级越深，编译出来的 CSS 代码的选择器层级将越深，这往往是大家不愿意看到的一点</li><li>属性嵌套：Sass 中还提供属性嵌套，CSS 有一些属性前缀相同，只是后缀不一样，比如：border-top&#x2F;border-right，与这个类似的还有 margin、padding、font 等属性。</li><li>伪类嵌套：借助 <strong>&amp;</strong></li></ul><ol start="6"><li>混合宏：如果你的整个网站中有几处小样式类似，比如颜色，字体等，在 Sass 可以使用变量来统一处理，那么这种选择还是不错的。但当你的样式变得越来越复杂，需要重复使用大段的样式时，使用变量就无法达到我们目了。这个时候 Sass 中的混合宏就会变得非常有意义。</li></ol><ul><li><p>6.1 声明</p><ul><li><p>6.1.1 <strong>不带参数混合宏</strong>：在Sass中、使用 “@mixin” 来声明一个混合宏。如：</p><pre><code>     <pre class="line-numbers language-scss" data-language="scss"><code class="language-scss"><span class="token keyword">@mixin</span> <span class="token selector">border-radius</span><span class="token punctuation">&#123;</span>    <span class="token property">-webkit-border-radius</span><span class="token punctuation">:</span> 5px<span class="token punctuation">;</span>    <span class="token property">border-radius</span><span class="token punctuation">:</span> 5px<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></code></pre></li></ul><p>其中 @mixin 是用来声明混合宏的关键词，有点类似 CSS 中的 @media、@font-face 一样。border-radius 是混合宏的名称。大括号里面是复用的样式代码。</p><ul><li>6.1.2 <strong>带参数混合宏</strong>：除了声明一个不带参数的混合宏之外，还可以在定义混合宏是带有参数</li></ul><pre class="line-numbers language-scss" data-language="scss"><code class="language-scss"><span class="token keyword">@mixin</span> <span class="token function">border-radius</span><span class="token punctuation">(</span><span class="token property"><span class="token variable">$radius</span></span><span class="token punctuation">:</span>5px<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token property">-webkit-border-radius</span><span class="token punctuation">:</span> <span class="token variable">$radius</span><span class="token punctuation">;</span>    <span class="token property">border-radius</span><span class="token punctuation">:</span> <span class="token variable">$radius</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>6.2 调用</p></li></ul><p>​    在 Sass 中通过 @mixin 关键词声明了一个混合宏，那么在实际调用中，其匹配了一个关键词“ @include ”来调用声明好的混合宏。例如在你的样式中定义了一个圆角的混合宏“border-radius”:</p><pre class="line-numbers language-scss" data-language="scss"><code class="language-scss"><span class="token keyword">@mixin</span> <span class="token selector">border-radius</span><span class="token punctuation">&#123;</span>    <span class="token property">-webkit-border-radius</span><span class="token punctuation">:</span> 3px<span class="token punctuation">;</span>    <span class="token property">border-radius</span><span class="token punctuation">:</span> 3px<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>在一个按钮中要调用定义好的混合宏“border-radius”,可以这样使用：</p><pre class="line-numbers language-scss" data-language="scss"><code class="language-scss"><span class="token selector">button </span><span class="token punctuation">&#123;</span>    <span class="token keyword">@include</span> border-radius<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>这个时候编译出来的css:</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">button</span> <span class="token punctuation">&#123;</span>  <span class="token property">-webkit-border-radius</span><span class="token punctuation">:</span> 3px<span class="token punctuation">;</span>  <span class="token property">border-radius</span><span class="token punctuation">:</span> 3px<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>6.3 混合宏的参数：Sass 的混合宏有一个强大的功能，可以传参，那么在 Sass 中传参主要有以下几种情形：</p><ul><li>6.3.1 传一个不带值得参数：在混合宏中，可以传一个不带任何值得参数，比如：</li></ul><pre class="line-numbers language-scss" data-language="scss"><code class="language-scss"><span class="token keyword">@mixin</span> <span class="token function">border-radius</span><span class="token punctuation">(</span><span class="token variable">$radius</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token property">-webkit-border-radius</span><span class="token punctuation">:</span> <span class="token variable">$radius</span><span class="token punctuation">;</span>  <span class="token property">border-radius</span><span class="token punctuation">:</span> <span class="token variable">$radius</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>在混合宏“border-radius”中定义了一个不带任何值的参数“$radius”。</p><p>在调用的时候可以给这个混合宏传一个参数值：</p><pre class="line-numbers language-scss" data-language="scss"><code class="language-scss"><span class="token selector">.box </span><span class="token punctuation">&#123;</span>  <span class="token keyword">@include</span> <span class="token function">border-radius</span><span class="token punctuation">(</span>3px<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>这里表示给混合宏传递了一个“border-radius”的值为 “3px”</p><p>编译出来的css</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.box</span> <span class="token punctuation">&#123;</span>  <span class="token property">-webkit-border-radius</span><span class="token punctuation">:</span> 3px<span class="token punctuation">;</span>  <span class="token property">border-radius</span><span class="token punctuation">:</span> 3px<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>6.3.2 传一个带值的参数：在Sass的混合宏中，还可以给混合宏的参数传一个默认值，</li></ul><pre class="line-numbers language-scss" data-language="scss"><code class="language-scss"><span class="token keyword">@mixin</span> <span class="token function">border-radius</span><span class="token punctuation">(</span><span class="token property"><span class="token variable">$radius</span></span><span class="token punctuation">:</span>3px<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token property">-webkit-border-radius</span><span class="token punctuation">:</span> <span class="token variable">$radius</span><span class="token punctuation">;</span>  <span class="token property">border-radius</span><span class="token punctuation">:</span> <span class="token variable">$radius</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>在混合宏“border-radius”传了一个参数“$radius”，而且给这个参数赋予了一个默认值“3px”。</p><p>在调用类似这样的混合宏时，会多有一个机会，假设你的页面中的圆角很多地方都是“3px”的圆角，那么这个时候只需要调用默认的混合宏“border-radius”:<code>@include border-radius;</code></p><p>编译出来的css：<code>border-radius: 3px</code></p><p><strong>同样也可以根据实际情况，随机给混合宏传值</strong></p></li><li><p>6.4  混合宏的不足</p></li></ul><p>混合宏在实际编码中给我们带来很多方便之处，特别是对于复用重复代码块。但其最大的不足之处是会生成冗余的代码块。比如在不同的地方调用一个相同的混合宏时。如：</p><pre class="line-numbers language-scss" data-language="scss"><code class="language-scss"><span class="token keyword">@mixin</span> <span class="token selector">border-radius</span><span class="token punctuation">&#123;</span>  <span class="token property">-webkit-border-radius</span><span class="token punctuation">:</span> 3px<span class="token punctuation">;</span>  <span class="token property">border-radius</span><span class="token punctuation">:</span> 3px<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.box </span><span class="token punctuation">&#123;</span>  <span class="token keyword">@include</span> border-radius<span class="token punctuation">;</span>  <span class="token property">margin-bottom</span><span class="token punctuation">:</span> 5px<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.btn </span><span class="token punctuation">&#123;</span>  <span class="token keyword">@include</span> border-radius<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="7"><li>扩展&#x2F;继承</li></ol><p>在Sass中是通过关键字 “@extend”来继承已存在的类样式块，从而实现代码的继承。</p><pre class="line-numbers language-scss" data-language="scss"><code class="language-scss"><span class="token comment">// SCSS</span><span class="token selector">.btn </span><span class="token punctuation">&#123;</span>  <span class="token property">border</span><span class="token punctuation">:</span> 1px solid #ccc<span class="token punctuation">;</span>  <span class="token property">padding</span><span class="token punctuation">:</span> 6px 10px<span class="token punctuation">;</span>  <span class="token property">font-size</span><span class="token punctuation">:</span> 14px<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.btn-primary </span><span class="token punctuation">&#123;</span>  <span class="token property">background-color</span><span class="token punctuation">:</span> #f36<span class="token punctuation">;</span>  <span class="token property">color</span><span class="token punctuation">:</span> #fff<span class="token punctuation">;</span>  <span class="token keyword">@extend</span> .btn<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.btn-second </span><span class="token punctuation">&#123;</span>  <span class="token property">background-color</span><span class="token punctuation">:</span> orange<span class="token punctuation">;</span>  <span class="token property">color</span><span class="token punctuation">:</span> #fff<span class="token punctuation">;</span>  <span class="token keyword">@extend</span> .btn<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">// CSS.btn, .btn-primary, .btn-second</span> <span class="token punctuation">&#123;</span>  <span class="token property">border</span><span class="token punctuation">:</span> 1px solid #ccc<span class="token punctuation">;</span>  <span class="token property">padding</span><span class="token punctuation">:</span> 6px 10px<span class="token punctuation">;</span>  <span class="token property">font-size</span><span class="token punctuation">:</span> 14px<span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token selector">// 合并到了一起.btn-primary</span> <span class="token punctuation">&#123;</span>  <span class="token property">background-color</span><span class="token punctuation">:</span> #f36<span class="token punctuation">;</span>  <span class="token property">color</span><span class="token punctuation">:</span> #fff<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.btn-second</span> <span class="token punctuation">&#123;</span>  <span class="token property">background-clor</span><span class="token punctuation">:</span> orange<span class="token punctuation">;</span>  <span class="token property">color</span><span class="token punctuation">:</span> #fff<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>从示例代码可以看出，在 Sass 中的继承，可以继承类样式块中所有样式代码，而且编译出来的 CSS 会将选择器合并在一起，形成组合选择器</p><ol start="8"><li><strong>占位符  %</strong>  placeholder</li></ol><p>它可以取代以前 CSS 中的基类造成的代码冗余的情形。因为 %placeholder 声明的代码，如果不被 @extend 调用的话，不会产生任何代码。</p><pre class="line-numbers language-scss" data-language="scss"><code class="language-scss"><span class="token selector"><span class="token placeholder">%mt5</span> </span><span class="token punctuation">&#123;</span>  <span class="token property">margin-top</span><span class="token punctuation">:</span> 5px<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector"><span class="token placeholder">%pt5</span></span><span class="token punctuation">&#123;</span>  <span class="token property">padding-top</span><span class="token punctuation">:</span> 5px<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这段代码没有被 @extend 调用，他并没有产生任何代码块，只是静静的躺在你的某个 SCSS 文件中。只有通过 @extend 调用才会产生代码</p><pre class="line-numbers language-scss" data-language="scss"><code class="language-scss"><span class="token comment">// SCSS</span><span class="token selector"><span class="token placeholder">%mt5</span> </span><span class="token punctuation">&#123;</span>  <span class="token property">margin-top</span><span class="token punctuation">:</span> 5px<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector"><span class="token placeholder">%pt5</span></span><span class="token punctuation">&#123;</span>  <span class="token property">padding-top</span><span class="token punctuation">:</span> 5px<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.btn </span><span class="token punctuation">&#123;</span>  <span class="token keyword">@extend</span> <span class="token placeholder selector">%mt5</span><span class="token punctuation">;</span>  <span class="token keyword">@extend</span> <span class="token placeholder selector">%pt5</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.block </span><span class="token punctuation">&#123;</span>  <span class="token keyword">@extend</span> <span class="token placeholder selector">%mt5</span><span class="token punctuation">;</span>  <span class="token selector">span </span><span class="token punctuation">&#123;</span>    <span class="token keyword">@extend</span> <span class="token placeholder selector">%pt5</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">// CSS.btn, .block</span> <span class="token punctuation">&#123;</span>  <span class="token property">margin-top</span><span class="token punctuation">:</span> 5px<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.btn, .block span</span> <span class="token punctuation">&#123;</span>  <span class="token property">padding-top</span><span class="token punctuation">:</span> 5px<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>从编译出来的 CSS 代码可以看出，通过 @extend 调用的占位符，编译出来的代码会将相同的代码合并在一起。这也是我们希望看到的效果，也让你的代码变得更为干净。</p>]]></content:encoded>
      
      
      <category domain="http://zhezhe0723.github.io/categories/css%E9%A2%84%E7%BC%96%E8%AF%91%E8%AF%AD%E6%B3%95/">css预编译语法</category>
      
      
      <category domain="http://zhezhe0723.github.io/tags/Scss/">Scss</category>
      
      
      <comments>http://zhezhe0723.github.io/2022/08/22/scss-de-ji-ben-yong-fa-ru-men-pian/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>IView ui组件</title>
      <link>http://zhezhe0723.github.io/2022/08/19/iview-ui-zu-jian/</link>
      <guid>http://zhezhe0723.github.io/2022/08/19/iview-ui-zu-jian/</guid>
      <pubDate>Thu, 18 Aug 2022 17:04:00 GMT</pubDate>
      
        
        
      <description>&lt;h3 id=&quot;Vue使用IView-ui组件库导航栏菜单做嵌套路由跳转，可以通过声明式和编程式路由两种方式&quot;&gt;&lt;a href=&quot;#Vue使用IView-ui组件库导航栏菜单做嵌套路由跳转，可以通过声明式和编程式路由两种方式&quot; class=&quot;headerlink&quot; title=&quot;</description>
        
      
      
      
      <content:encoded><![CDATA[<h3 id="Vue使用IView-ui组件库导航栏菜单做嵌套路由跳转，可以通过声明式和编程式路由两种方式"><a href="#Vue使用IView-ui组件库导航栏菜单做嵌套路由跳转，可以通过声明式和编程式路由两种方式" class="headerlink" title="Vue使用IView ui组件库导航栏菜单做嵌套路由跳转，可以通过声明式和编程式路由两种方式"></a>Vue使用IView ui组件库导航栏菜单做嵌套路由跳转，可以通过声明式和编程式路由两种方式</h3><ol><li>声明式路由的跳转</li></ol><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;template&gt;&lt;div&gt;&lt;Menu :theme&#x3D;&quot;theme2&quot; &gt;    &lt;MenuGroup title&#x3D;&quot;使用&quot;&gt;      &lt;MenuItem        v-for&#x3D;&quot;(item,index) in siderMenuData&quot;        :key&#x3D;&quot;index&quot;        :to&#x3D;&quot;item.name&quot;        :name&#x3D;&quot;item.name&quot;        &gt;&lt;Icon :type&#x3D;&quot;item.icon&quot; &#x2F;&gt;&#123;&#123; item.title &#125;&#125;&lt;&#x2F;MenuItem      &gt;    &lt;&#x2F;MenuGroup&gt;  &lt;&#x2F;Menu&gt;&lt;&#x2F;div&gt;&lt;&#x2F;template&lt;script&gt;data() &#123;return &#123; siderMenuData: [        &#123;          name: &quot;ArticleManage&quot;, &#x2F;&#x2F;此处的name用来路由跳转          icon: &quot;md-document&quot;,          title: &quot;文章管理&quot;,        &#125;,        &#123;          name: &quot;CommentManage&quot;,          icon: &quot;md-chatbubbles&quot;,          title: &quot;评论管理&quot;,        &#125;,        &#123;          name: &quot;ReportManage&quot;,          icon: &quot;md-heart&quot;,          title: &quot;举报管理&quot;,        &#125;,      ],&#125;&#125;通过to 中的name跳转&lt;&#x2F;script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li>编程式路由的跳转</li></ol><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;template&gt;&lt;div&gt;&lt;Menu :theme&#x3D;&quot;theme2&quot; @on-select&#x3D;&quot;onClickChangeMenu&quot; width&#x3D;&quot;200px&quot; height&#x3D;&quot;100%&quot;&gt;    &lt;MenuGroup title&#x3D;&quot;使用&quot;&gt;      &lt;MenuItem        v-for&#x3D;&quot;(item,index) in siderMenuData&quot;        :key&#x3D;&quot;index&quot;        :name&#x3D;&quot;item.name&quot;        &gt;&lt;Icon :type&#x3D;&quot;item.icon&quot; &#x2F;&gt;&#123;&#123; item.title &#125;&#125;&lt;&#x2F;MenuItem      &gt;    &lt;&#x2F;MenuGroup&gt;  &lt;&#x2F;Menu&gt;&lt;&#x2F;div&gt;&lt;&#x2F;template&lt;script&gt;data() &#123;return &#123; siderMenuData: [        &#123;          name: &quot;ArticleManage&quot;, &#x2F;&#x2F;此处的name用来路由跳转          icon: &quot;md-document&quot;,          title: &quot;文章管理&quot;,        &#125;,        &#123;          name: &quot;CommentManage&quot;,          icon: &quot;md-chatbubbles&quot;,          title: &quot;评论管理&quot;,        &#125;,        &#123;          name: &quot;ReportManage&quot;,          icon: &quot;md-heart&quot;,          title: &quot;举报管理&quot;,        &#125;,      ],&#125;,      methods:&#123;        &#x2F;&#x2F;通过点击事件触发name值，使路由跳转 onClickChangeMenu(name) &#123;      &#x2F;&#x2F;this.$router.push(name);            &#x2F;&#x2F; this.$router.push(name) 这个是 this.$router.push(&#123; path: name &#125;) 的简写  这个是通过 路由里面的path值跳转的           &#x2F;&#x2F;this.$router.push(&#123; name: name &#125;)  这个是通过name跳转的           this.$router.push(&#123; name: name &#125;)    &#125;,&#125;&#125;&lt;&#x2F;script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content:encoded>
      
      
      <category domain="http://zhezhe0723.github.io/categories/UI%E7%BB%84%E4%BB%B6/">UI组件</category>
      
      
      <category domain="http://zhezhe0723.github.io/tags/IView/">IView</category>
      
      
      <comments>http://zhezhe0723.github.io/2022/08/19/iview-ui-zu-jian/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Array的常见用法</title>
      <link>http://zhezhe0723.github.io/2022/08/17/array-de-chang-jian-yong-fa/</link>
      <guid>http://zhezhe0723.github.io/2022/08/17/array-de-chang-jian-yong-fa/</guid>
      <pubDate>Wed, 17 Aug 2022 15:54:52 GMT</pubDate>
      
        
        
      <description>&lt;h3 id=&quot;JS-中截取数组的方法&quot;&gt;&lt;a href=&quot;#JS-中截取数组的方法&quot; class=&quot;headerlink&quot; title=&quot;JS 中截取数组的方法&quot;&gt;&lt;/a&gt;JS 中截取数组的方法&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;[TOC]&lt;/p&gt;
&lt;/blockquot</description>
        
      
      
      
      <content:encoded><![CDATA[<h3 id="JS-中截取数组的方法"><a href="#JS-中截取数组的方法" class="headerlink" title="JS 中截取数组的方法"></a>JS 中截取数组的方法</h3><blockquote><p>[TOC]</p></blockquote><h4 id="1-splice-方法"><a href="#1-splice-方法" class="headerlink" title="1. splice()方法"></a>1. <strong>splice()方法</strong></h4><p>​         splice()方法通过删除或者替换现有元素或者原地添加新的元素来修改数组，并以数组的形式返回被修改的内容。这个方法会改变原数组。</p><p>​      <strong>–语法–</strong></p><pre class="line-numbers language-js" data-language="js"><code class="language-js">array<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>start<span class="token punctuation">[</span><span class="token punctuation">,</span>deleteCount<span class="token punctuation">[</span><span class="token punctuation">,</span>item1<span class="token punctuation">[</span><span class="token punctuation">,</span>item2<span class="token punctuation">[</span><span class="token punctuation">,</span><span class="token operator">...</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment">//start :指定修改的开始位置（从0开始计数），如果超出了数组的长度，则从数组末尾开始添加内容；如果是负值，则表示从数组末位（从后往前数）开始的第n 位；如果负数的绝对值大于数组的长度，则表示开始的位置为第0位。</span><span class="token comment">//deleteCount(可选) :整数，表示要删除的数组元素的个数。如果deleteCount大于start之后的元素的总数，则从start后面的元素都将被删除（包含第start位）；如果 deleteCount 是 0 或者负数，则不移除元素。这种情况下，至少应添加一个新元素。</span><span class="token comment">// item1,item2(可选) :要添加进数组的元素，从start 位置开始。如果不指定，则 splice() 将只删除数组元素。</span><span class="token comment">// 返回值 由被删除的元素组成的一个数组。如果只删除了一个元素，则返回只包含一个元素的数组。如果没有删除元素，则返回空数组。</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​     <strong>–案例–</strong></p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"a"</span><span class="token punctuation">,</span><span class="token string">"b"</span><span class="token punctuation">,</span><span class="token string">"c"</span><span class="token punctuation">,</span><span class="token string">"d"</span><span class="token punctuation">,</span><span class="token string">"e"</span><span class="token punctuation">]</span><span class="token keyword">var</span> arr1 <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">"f"</span><span class="token punctuation">)</span> <span class="token comment">// 3 表示从索引为3的位置开始删除，</span><span class="token comment">// 1 删除元素的个数</span><span class="token comment">// 最后面是表示向原数组中添加元素，位置就是前面两个数字所定义的位置添加数据</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span> <span class="token comment">//原数组：arr["a", "b", "c", "f", "e"]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr1<span class="token punctuation">)</span>  <span class="token comment">// 返回值 --被删除的元素 arr1 ["d"]</span><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"a"</span><span class="token punctuation">,</span><span class="token string">"b"</span><span class="token punctuation">,</span><span class="token string">"c"</span><span class="token punctuation">,</span><span class="token string">"d"</span><span class="token punctuation">,</span><span class="token string">"e"</span><span class="token punctuation">]</span><span class="token keyword">var</span> arr1 <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span>  <span class="token comment">//原数组：arr ["a", "b", "e"]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr1<span class="token punctuation">)</span> <span class="token comment">// 返回值 --被删除的元素 arr1 ["c", "d"]</span><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"a"</span><span class="token punctuation">,</span><span class="token string">"b"</span><span class="token punctuation">,</span><span class="token string">"c"</span><span class="token punctuation">,</span><span class="token string">"d"</span><span class="token punctuation">,</span><span class="token string">"e"</span><span class="token punctuation">]</span><span class="token keyword">var</span> arr1 <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>  <span class="token comment">//从索引 1 的位置开始删除所有元素</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span>  <span class="token comment">//原数组：arr["a"]   </span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr1<span class="token punctuation">)</span> <span class="token comment">//返回值 --被删除的元素 arr1 ["b", "c", "d", "e"]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-filter-方法"><a href="#2-filter-方法" class="headerlink" title="2. filter() 方法"></a>2. filter() 方法</h4><p><strong>–语法–</strong></p><pre class="line-numbers language-none"><code class="language-none">filter() 方法会创建一个新数组，其中包含所有通过回调函数测试的元素。filter 为数组中的每个元素调用一次 callback 函数， callback 函数返回 true 表示该元素通过测试，保留该元素，false 则不保留。filter 不会改变原数组，它返回过滤后的新数组。<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>–案例–</strong></p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> animals <span class="token operator">=</span> <span class="token punctuation">[</span>  <span class="token punctuation">&#123;</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"Fluffykins"</span><span class="token punctuation">,</span> <span class="token literal-property property">species</span><span class="token operator">:</span> <span class="token string">"rabbit"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#123;</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"Caro"</span><span class="token punctuation">,</span> <span class="token literal-property property">species</span><span class="token operator">:</span><span class="token string">"dog"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#123;</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"Hamilton"</span><span class="token punctuation">,</span> <span class="token literal-property property">species</span><span class="token operator">:</span> <span class="token string">"dog"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#123;</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"Harold"</span><span class="token punctuation">,</span> <span class="token literal-property property">species</span><span class="token operator">:</span> <span class="token string">"fish"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#123;</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"Ursula"</span><span class="token punctuation">,</span> <span class="token literal-property property">species</span><span class="token operator">:</span> <span class="token string">"cat"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#123;</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"Jimmy"</span><span class="token punctuation">,</span> <span class="token literal-property property">species</span><span class="token operator">:</span> <span class="token string">"fish"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">var</span> dogs <span class="token operator">=</span> animals<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token parameter">x</span> <span class="token operator">=></span> x<span class="token punctuation">.</span>species <span class="token operator">===</span> <span class="token string">"dog"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> dogs <span class="token operator">=</span> animals<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token parameter">item</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> item<span class="token punctuation">.</span>species <span class="token operator">===</span> <span class="token string">"dog"</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>dogs<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#123;name: "Caro", species: "dog"&#125;</span><span class="token comment">// &#123; name: "Hamilton", species: "dog" &#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-map-方法"><a href="#3-map-方法" class="headerlink" title="3. map()方法"></a>3. map()方法</h4><p><strong>–语法–</strong></p><pre class="line-numbers language-none"><code class="language-none">map() 方法创建一个新数组，其结果是该数组中的每个元素都调用一个提供的函数后返回的结果。map 不会改变原数组。<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>–案例–</strong></p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> animals <span class="token operator">=</span> <span class="token punctuation">[</span>  <span class="token punctuation">&#123;</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"Fluffykins"</span><span class="token punctuation">,</span> <span class="token literal-property property">species</span><span class="token operator">:</span> <span class="token string">"rabbit"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#123;</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"Caro"</span><span class="token punctuation">,</span> <span class="token literal-property property">species</span><span class="token operator">:</span><span class="token string">"dog"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#123;</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"Hamilton"</span><span class="token punctuation">,</span> <span class="token literal-property property">species</span><span class="token operator">:</span> <span class="token string">"dog"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#123;</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"Harold"</span><span class="token punctuation">,</span> <span class="token literal-property property">species</span><span class="token operator">:</span> <span class="token string">"fish"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#123;</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"Ursula"</span><span class="token punctuation">,</span> <span class="token literal-property property">species</span><span class="token operator">:</span> <span class="token string">"cat"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#123;</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"Jimmy"</span><span class="token punctuation">,</span> <span class="token literal-property property">species</span><span class="token operator">:</span> <span class="token string">"fish"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">var</span> names <span class="token operator">=</span> animals<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token parameter">x</span><span class="token operator">=></span>x<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> names <span class="token operator">=</span> animals<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token parameter">item</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> item<span class="token punctuation">.</span>name<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>names<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//["Fluffykins", "Caro", "Hamilton", "Harold", "Ursula", "Jimmy"]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content:encoded>
      
      
      <category domain="http://zhezhe0723.github.io/categories/Array/">Array</category>
      
      
      <category domain="http://zhezhe0723.github.io/tags/JS/">JS</category>
      
      
      <comments>http://zhezhe0723.github.io/2022/08/17/array-de-chang-jian-yong-fa/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>uni-app使用总结</title>
      <link>http://zhezhe0723.github.io/2022/08/10/uni-app-shi-yong-zong-jie/</link>
      <guid>http://zhezhe0723.github.io/2022/08/10/uni-app-shi-yong-zong-jie/</guid>
      <pubDate>Tue, 09 Aug 2022 16:58:57 GMT</pubDate>
      
        
        
      <description>&lt;h3 id=&quot;rich-text-富文本-图片自适应问题-解决&quot;&gt;&lt;a href=&quot;#rich-text-富文本-图片自适应问题-解决&quot; class=&quot;headerlink&quot; title=&quot;rich-text 富文本 图片自适应问题 解决&quot;&gt;&lt;/a&gt;rich-text 富文本 </description>
        
      
      
      
      <content:encoded><![CDATA[<h3 id="rich-text-富文本-图片自适应问题-解决"><a href="#rich-text-富文本-图片自适应问题-解决" class="headerlink" title="rich-text 富文本 图片自适应问题 解决"></a>rich-text 富文本 图片自适应问题 解决</h3><p>  <strong>问题：</strong> rich-text是微信小程序的富文本标签，在使用rich-text的时候，需要rich-text内部图片宽高自适应。</p><p>  <strong>解决方法：</strong> 首先新建一个 text.js 文件</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">/** * 处理富文本里的图片宽度自适应 * 1.去掉img标签里的style、width、height属性 * 2.img标签添加style属性：max-width:100%;height:auto * 3.修改所有style里的width属性为max-width:100% * 4.去掉&lt;br/>标签 * @param html * @returns &#123;void|string|*&#125; */</span><span class="token keyword">function</span> <span class="token function">formatRichText</span><span class="token punctuation">(</span><span class="token parameter">html</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">let</span> newContent<span class="token operator">=</span> html<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">&lt;img[^>]*></span><span class="token regex-delimiter">/</span><span class="token regex-flags">gi</span></span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">match<span class="token punctuation">,</span>capture</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    match <span class="token operator">=</span> match<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">style="[^"]+"</span><span class="token regex-delimiter">/</span><span class="token regex-flags">gi</span></span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">style='[^']+'</span><span class="token regex-delimiter">/</span><span class="token regex-flags">gi</span></span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    match <span class="token operator">=</span> match<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">width="[^"]+"</span><span class="token regex-delimiter">/</span><span class="token regex-flags">gi</span></span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">width='[^']+'</span><span class="token regex-delimiter">/</span><span class="token regex-flags">gi</span></span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    match <span class="token operator">=</span> match<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">height="[^"]+"</span><span class="token regex-delimiter">/</span><span class="token regex-flags">gi</span></span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">height='[^']+'</span><span class="token regex-delimiter">/</span><span class="token regex-flags">gi</span></span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> match<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  newContent <span class="token operator">=</span> newContent<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">style="[^"]+"</span><span class="token regex-delimiter">/</span><span class="token regex-flags">gi</span></span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">match<span class="token punctuation">,</span>capture</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    match <span class="token operator">=</span> match<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">width:[^;]+;</span><span class="token regex-delimiter">/</span><span class="token regex-flags">gi</span></span><span class="token punctuation">,</span> <span class="token string">'max-width:100%;'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">width:[^;]+;</span><span class="token regex-delimiter">/</span><span class="token regex-flags">gi</span></span><span class="token punctuation">,</span> <span class="token string">'max-width:100%;'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> match<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  newContent <span class="token operator">=</span> newContent<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">&lt;br[^>]*\/></span><span class="token regex-delimiter">/</span><span class="token regex-flags">gi</span></span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  newContent <span class="token operator">=</span> newContent<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\&lt;img</span><span class="token regex-delimiter">/</span><span class="token regex-flags">gi</span></span><span class="token punctuation">,</span> <span class="token string">'&lt;img style="max-width:100%;height:auto;display:block;margin-top:0;margin-bottom:0;"'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> newContent<span class="token punctuation">;</span><span class="token punctuation">&#125;</span> module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  formatRichText<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>   接下来，那个页面需要进行富文本展示，就把这个js 文件引入</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span>formatRichText<span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'xxxxx/text.js'</span>  <span class="token comment">//看自己的路径</span><span class="token comment">//这个是获取富文本的接口</span><span class="token function">teacher</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">res</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>strings <span class="token operator">=</span> <span class="token function">formatRichText</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span>data<span class="token punctuation">.</span>teacherDetails<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token comment">//这是需要在页面上展示的内容</span><span class="token operator">&lt;</span>rich<span class="token operator">-</span>text <span class="token operator">:</span>nodes<span class="token operator">=</span><span class="token string">"strings"</span> style<span class="token operator">=</span><span class="token string">"width: 100%;"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>rich<span class="token operator">-</span>text<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>完美解决 uni-app 的 rich-text组件 中图片宽高自适应问题</strong> </p><p>加油加油加油！！！</p>]]></content:encoded>
      
      
      <category domain="http://zhezhe0723.github.io/categories/%E6%A1%86%E6%9E%B6/">框架</category>
      
      
      <category domain="http://zhezhe0723.github.io/tags/uni-app/">uni-app</category>
      
      
      <comments>http://zhezhe0723.github.io/2022/08/10/uni-app-shi-yong-zong-jie/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>商城项目问题汇总</title>
      <link>http://zhezhe0723.github.io/2022/08/01/shang-cheng-xiang-mu-wen-ti-hui-zong/</link>
      <guid>http://zhezhe0723.github.io/2022/08/01/shang-cheng-xiang-mu-wen-ti-hui-zong/</guid>
      <pubDate>Sun, 31 Jul 2022 16:52:12 GMT</pubDate>
      
        
        
      <description>&lt;h3 id=&quot;在请求数据的时候后台报30001错&quot;&gt;&lt;a href=&quot;#在请求数据的时候后台报30001错&quot; class=&quot;headerlink&quot; title=&quot;在请求数据的时候后台报30001错&quot;&gt;&lt;/a&gt;在请求数据的时候后台报30001错&lt;/h3&gt;&lt;p&gt;  有一种可能是在数</description>
        
      
      
      
      <content:encoded><![CDATA[<h3 id="在请求数据的时候后台报30001错"><a href="#在请求数据的时候后台报30001错" class="headerlink" title="在请求数据的时候后台报30001错"></a>在请求数据的时候后台报30001错</h3><p>  有一种可能是在数据请求的时候，请求头header 的格式不对,需要在请求的方法中写一个header 请求头</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">getAddcart</span><span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> req<span class="token punctuation">.</span><span class="token function">request</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token literal-property property">url</span><span class="token operator">:</span><span class="token string">'/jingli-multishop/buyer/trade/carts'</span><span class="token punctuation">,</span><span class="token literal-property property">method</span><span class="token operator">:</span><span class="token string">'post'</span><span class="token punctuation">,</span>data<span class="token punctuation">,</span><span class="token literal-property property">header</span><span class="token operator">:</span><span class="token punctuation">&#123;</span><span class="token string-property property">'content-type'</span><span class="token operator">:</span><span class="token string">'application/x-www-form-urlencoded'</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content:encoded>
      
      
      <category domain="http://zhezhe0723.github.io/categories/%E5%B7%A5%E4%BD%9C%E9%97%AE%E9%A2%98/">工作问题</category>
      
      
      <category domain="http://zhezhe0723.github.io/tags/%E9%A1%B9%E7%9B%AE%E6%80%BB%E7%BB%93/">项目总结</category>
      
      
      <comments>http://zhezhe0723.github.io/2022/08/01/shang-cheng-xiang-mu-wen-ti-hui-zong/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Flex布局</title>
      <link>http://zhezhe0723.github.io/2022/07/10/flex-bu-ju/</link>
      <guid>http://zhezhe0723.github.io/2022/07/10/flex-bu-ju/</guid>
      <pubDate>Sun, 10 Jul 2022 14:59:14 GMT</pubDate>
      
        
        
      <description>&lt;h3 id=&quot;Flex-布局的定义&quot;&gt;&lt;a href=&quot;#Flex-布局的定义&quot; class=&quot;headerlink&quot; title=&quot;Flex 布局的定义&quot;&gt;&lt;/a&gt;Flex 布局的定义&lt;/h3&gt;&lt;p&gt;Flex 是Flexible Box 的缩写，意为“弹性布局” ，用来为盒状</description>
        
      
      
      
      <content:encoded><![CDATA[<h3 id="Flex-布局的定义"><a href="#Flex-布局的定义" class="headerlink" title="Flex 布局的定义"></a>Flex 布局的定义</h3><p>Flex 是Flexible Box 的缩写，意为“弹性布局” ，用来为盒状模型提供最大的灵活性。</p><p>任何一个容器都可以指定为Flex 布局。 <code>.box&#123; display:flex;&#125;</code></p><p>行内元素也可以使用Flex 布局。 <code> .box &#123; display:inline-flex;&#125;</code></p><blockquote><p>Webkit 内核的浏览器，必须加上 <strong>-webkit</strong>  前缀 <code> .box &#123;display: -webkit-flex; display:flex;&#125;</code></p><p>在设置了Flex 布局之后，子元素中的  float, clear, vertical-align 属性将失效</p></blockquote><h3 id="Flex-的基本概念"><a href="#Flex-的基本概念" class="headerlink" title="Flex 的基本概念"></a>Flex 的基本概念</h3><p>  在采用了Flex 布局的元素，称为 Flex 容器 （flex container），简称“ 容器”。 它的所有子元素自动成为容器成员，称为 Flex 项目（ flex item）,简称“项目”。</p><p>容器默认存在两根轴： 水平的主轴（main axis） 和垂直的交叉轴（cross axis）。主轴的开始位置（与边框的交叉点）叫做 main start, 结束位置 叫做 main end; 交叉轴的开始位置叫做 cross start,结束位置叫做 cross end。</p><blockquote><p>项目默认沿主轴排列，单个项目占据的主轴空间叫做 main size,占据的交叉轴空间 叫做 cross size</p></blockquote><h3 id="容器的属性"><a href="#容器的属性" class="headerlink" title="容器的属性"></a>容器的属性</h3><ul><li>flex-direction   决定主轴的方向，即项目的排列方向</li><li>flex-wrap  换行方式</li><li>flex-flow   上边两个属性的简写形式</li><li>justify-content   主轴上的对齐方式</li><li>align-items   交叉轴上的对齐方式</li><li>align-content    多根轴线的对齐方式</li></ul><h4 id="flex-direction属性"><a href="#flex-direction属性" class="headerlink" title="flex-direction属性"></a>flex-direction属性</h4><p>flex-direction 属性决定主轴的方向，（即项目的排列方向）</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.box</span> <span class="token punctuation">&#123;</span>  <span class="token property">flex-direction</span><span class="token punctuation">:</span>row<span class="token punctuation">;</span>   //主轴为水平方向，起点在左端  <span class="token property">flex-direction</span><span class="token punctuation">:</span>row-reverse<span class="token punctuation">;</span>  //起点在右端  <span class="token property">flex-direction</span><span class="token punctuation">:</span>column<span class="token punctuation">;</span>  //主轴为垂直方向，起点在上方  <span class="token property">flex-direction</span><span class="token punctuation">:</span>column-reverse<span class="token punctuation">;</span>  //起点在下方<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="flex-wrap属性"><a href="#flex-wrap属性" class="headerlink" title="flex-wrap属性"></a>flex-wrap属性</h4><p> flex-wrap 属性，在默认情况下，项目都排在一条线（轴线）上，flex-wrap属性定义，如果一条轴线排不下，如何换行。</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.box</span> <span class="token punctuation">&#123;</span>  <span class="token property">flex-wrap</span><span class="token punctuation">:</span> nowrap<span class="token punctuation">;</span>  //默认，不换行  <span class="token property">flex-wrap</span><span class="token punctuation">:</span> wrap<span class="token punctuation">;</span>  //换行，第一行在上方或左方（根据主轴方向）  <span class="token property">flex-wrap</span><span class="token punctuation">:</span> wrap-reverse<span class="token punctuation">;</span>  //换行，第一行在下方或右方（根据主轴方向）<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="flex-flow-属性"><a href="#flex-flow-属性" class="headerlink" title="flex-flow 属性"></a>flex-flow 属性</h4><p>  flex-flow 属性是 flex-direction 和 flex-wrap 的简写形式，默认值为 ** row  nowrap**。</p><h4 id="justify-content-属性"><a href="#justify-content-属性" class="headerlink" title="justify-content 属性"></a>justify-content 属性</h4><p>  justify-content 属性定义了项目在主轴上的对齐方式。</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.box</span> <span class="token punctuation">&#123;</span>  <span class="token property">justify-content</span><span class="token punctuation">:</span> flex-start<span class="token punctuation">;</span>  // 默认值 左对齐  <span class="token property">justify-content</span><span class="token punctuation">:</span> flex-end<span class="token punctuation">;</span>  // 右对齐  <span class="token property">justify-content</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>  //居中  <span class="token property">justify-content</span><span class="token punctuation">:</span> space-between<span class="token punctuation">;</span>  //两端对齐，项目之间的间隔都相等  <span class="token property">justify-content</span><span class="token punctuation">:</span> space-around<span class="token punctuation">;</span>  //每个项目两侧的间隔相等，所以，项目之间的间隔比项目与边框的间隔大一倍<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="align-items-属性"><a href="#align-items-属性" class="headerlink" title="align-items 属性"></a>align-items 属性</h4><p>  align-items 属性定义项目在交叉轴上如何对齐。</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.box</span> <span class="token punctuation">&#123;</span>  <span class="token property">align-items</span><span class="token punctuation">:</span> flex-start<span class="token punctuation">;</span>  // 交叉轴的起点对齐  <span class="token property">align-items</span><span class="token punctuation">:</span> flex-end<span class="token punctuation">;</span>  //交叉轴的终点对齐  <span class="token property">align-items</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>  //交叉轴的中点对齐  <span class="token property">align-items</span><span class="token punctuation">:</span> baseline<span class="token punctuation">;</span>  //项目的第一行文字的基线对齐  <span class="token property">align-items</span><span class="token punctuation">:</span> stretch<span class="token punctuation">;</span>  //如果项目未设置高度或设为auto<span class="token punctuation">,</span>将占满整个容器的高度<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="align-content-属性"><a href="#align-content-属性" class="headerlink" title="align-content 属性"></a>align-content 属性</h4><p> align-content 属性定义了多根轴线的对齐方式，如果项目只有一根轴线，则该属性不起作用。</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.box</span> <span class="token punctuation">&#123;</span>  <span class="token property">align-content</span><span class="token punctuation">:</span> flex-start<span class="token punctuation">;</span>  //与交叉轴的起点对齐  <span class="token property">align-content</span><span class="token punctuation">:</span> flex-end<span class="token punctuation">;</span>  //与交叉轴的终点对齐  <span class="token property">align-content</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>  //与交叉轴的中点对齐  <span class="token property">align-content</span><span class="token punctuation">:</span> space-between<span class="token punctuation">;</span>  //与交叉轴两端对齐，轴线之间的间隔平均分布  <span class="token property">align-content</span><span class="token punctuation">:</span> sapce-around<span class="token punctuation">;</span>  //每根轴线两侧的间隔都相等。所以，轴线之间的间隔比轴线与边框的间隔大一倍。  <span class="token property">align-content</span><span class="token punctuation">:</span> stretch<span class="token punctuation">;</span>  //默认值，轴线占满整个交叉轴<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="项目的属性"><a href="#项目的属性" class="headerlink" title="项目的属性"></a>项目的属性</h3><ul><li>order   项目的排列顺序</li><li>flex-grow</li><li>flex-shrink</li><li>flex-basis</li><li>flex</li><li>align-self</li></ul><h4 id="order-属性"><a href="#order-属性" class="headerlink" title="order 属性"></a>order 属性</h4><p>  order 属性定义项目的排列顺序，数值越小，排列越靠前，默认为 0 。</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.item</span> <span class="token punctuation">&#123;</span>  <span class="token property">order</span><span class="token punctuation">:</span> &lt;<span class="token function">integer</span><span class="token punctuation">(</span>整数<span class="token punctuation">)</span>><span class="token punctuation">;</span>  //<span class="token property">order</span><span class="token punctuation">:</span> 2<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="flex-grow-属性"><a href="#flex-grow-属性" class="headerlink" title="flex-grow 属性"></a>flex-grow 属性</h4><p>  flex-grow 属性定义项目的放大比例，默认为 0 ，即如果存在剩余空间，也不放大。</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.item</span> <span class="token punctuation">&#123;</span>  <span class="token property">flex-grow</span><span class="token punctuation">:</span> &lt;number><span class="token punctuation">;</span>  //default 0 <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><blockquote><p>如果所有项目的<code>flex-grow</code>属性都为1，则它们将等分剩余空间（如果有的话）。如果一个项目的<code>flex-grow</code>属性为2，其他项目都为1，则前者占据的剩余空间将比其他项多一倍。</p></blockquote><h4 id="flex-shrink-属性"><a href="#flex-shrink-属性" class="headerlink" title="flex-shrink 属性"></a>flex-shrink 属性</h4><p>  flex-shrink 属性定义了项目的缩小比例，默认为1，即如果空间不足，该项目将缩小。</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.item</span> <span class="token punctuation">&#123;</span>  <span class="token property">flex-shrink</span><span class="token punctuation">:</span> &lt;number><span class="token punctuation">;</span> //default 1<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><blockquote><p>如果所有项目的<code>flex-shrink</code>属性都为1，当空间不足时，都将等比例缩小。如果一个项目的<code>flex-shrink</code>属性为0，其他项目都为1，则空间不足时，前者不缩小。</p></blockquote><h4 id="flex-basis-属性"><a href="#flex-basis-属性" class="headerlink" title="flex-basis 属性"></a>flex-basis 属性</h4><p>   <code>flex-basis</code>属性定义了在分配多余空间之前，项目占据的主轴空间（main size）。浏览器根据这个属性，计算主轴是否有多余空间。它的默认值为<code>auto</code>，即项目的本来大小。</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.item</span> <span class="token punctuation">&#123;</span>  <span class="token property">flex-basis</span><span class="token punctuation">:</span> &lt;length>  //default auto<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><blockquote><p>它可以设为跟<code>width</code>或<code>height</code>属性一样的值（比如350px），则项目将占据固定空间。</p></blockquote><h4 id="flex-属性"><a href="#flex-属性" class="headerlink" title="flex 属性"></a>flex 属性</h4><p>  <code>flex</code>属性是<code>flex-grow</code>, <code>flex-shrink</code> 和 <code>flex-basis</code>的简写，默认值为<code>0 1 auto</code>。后两个属性可选。</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.item</span> <span class="token punctuation">&#123;</span>  <span class="token property">flex</span><span class="token punctuation">:</span> none | [ &lt;<span class="token string">'flex-grow'</span>> &lt;<span class="token string">'flex-shrink'</span>>? || &lt;<span class="token string">'flex-basis'</span>> ]<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><blockquote><p>该属性有两个快捷值：<code>auto</code> (<code>1 1 auto</code>) 和 none (<code>0 0 auto</code>)。</p><p>建议优先使用这个属性，而不是单独写三个分离的属性，因为浏览器会推算相关值。</p></blockquote><h4 id="align-self-属性"><a href="#align-self-属性" class="headerlink" title="align-self 属性"></a>align-self 属性</h4><p>  <code>align-self</code>属性允许单个项目有与其他项目不一样的对齐方式，可覆盖<code>align-items</code>属性。默认值为<code>auto</code>，表示继承父元素的<code>align-items</code>属性，如果没有父元素，则等同于<code>stretch</code>。</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.item</span> <span class="token punctuation">&#123;</span>  <span class="token property">align-self</span><span class="token punctuation">:</span> auto | flex-start | flex-end | center | baseline | stretch<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><blockquote><p>该属性可能取6个值，除了auto，其他都与align-items属性完全一致。</p></blockquote>]]></content:encoded>
      
      
      <category domain="http://zhezhe0723.github.io/categories/%E5%B8%83%E5%B1%80/">布局</category>
      
      
      <category domain="http://zhezhe0723.github.io/tags/%E4%BD%BF%E7%94%A8%E6%89%8B%E5%86%8C/">使用手册</category>
      
      
      <comments>http://zhezhe0723.github.io/2022/07/10/flex-bu-ju/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>vuex</title>
      <link>http://zhezhe0723.github.io/2022/07/02/vuex/</link>
      <guid>http://zhezhe0723.github.io/2022/07/02/vuex/</guid>
      <pubDate>Sat, 02 Jul 2022 04:24:12 GMT</pubDate>
      
        
        
      <description>&lt;h3 id=&quot;介绍Vuex&quot;&gt;&lt;a href=&quot;#介绍Vuex&quot; class=&quot;headerlink&quot; title=&quot;介绍Vuex&quot;&gt;&lt;/a&gt;介绍Vuex&lt;/h3&gt;&lt;p&gt;Vuex 是一个专为 Vue.js 应用程序开发的&lt;strong&gt;状态管理模式 + 库&lt;/strong&gt;。它</description>
        
      
      
      
      <content:encoded><![CDATA[<h3 id="介绍Vuex"><a href="#介绍Vuex" class="headerlink" title="介绍Vuex"></a>介绍Vuex</h3><p>Vuex 是一个专为 Vue.js 应用程序开发的<strong>状态管理模式 + 库</strong>。它采用集中式存储管理应用的所有组件的状态，并以相应的规则保证状态以一种可预测的方式发生变化。</p><blockquote><p>vuex 的工作流程：用户组件按钮 →通过dispatch去触发→actions→通过commit（提交）触发→mutation→进而改变→state→伴随着state的改变，重新渲染组件。actions是异步；mutation是同步；往往用户在调后端接口请求数据是异步操作，所以需要借助actions</p></blockquote><p><strong>什么样的数据适合存储到Vuex中：</strong>一般情况下，只有组件之间共享的数据，才有必要存储到vuex中；对于组件中的私有数据，依旧存储在组件自身的data中即可。</p><h3 id="核心概念"><a href="#核心概念" class="headerlink" title="核心概念"></a>核心概念</h3><h4 id="State"><a href="#State" class="headerlink" title="State"></a>State</h4><p>State提供唯一的公共数据源，所有共享的数据都要统一放到 Store的 State 中进行存储。</p><p><strong>方法</strong>:</p><ol><li>通过this.$store.state.全局数据名称 访问 由于在模板字符串中，是不需要写this的，所以直接写this后边的。  <code>展示count 的值&#123;&#123;$store.state.count&#125;&#125;</code></li><li>mapState 映射为计算属性：通过刚才导入的mapState函数，将当前组件需要的全局数据，映射为当前组件的computed 计算属性</li></ol><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 使用： <span class="token operator">--</span><span class="token operator">></span><span class="token operator">&lt;</span>h3<span class="token operator">></span>当前最新的count值为：<span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> xCount <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>h3<span class="token operator">></span><span class="token comment">//1.导入辅助函数 mapState</span><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> mapState <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'vuex'</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>  <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token literal-property property">computed</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// mapState 可以接收数组或对象形式的参数 映射为计算属性，下面分别示例</span>    <span class="token comment">//2.1 传入数组 </span>    <span class="token operator">...</span><span class="token function">mapState</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'count'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token comment">//2.2 对象形式 可以自定义名称</span><span class="token operator">...</span><span class="token function">mapState</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token function-variable function">xCount</span><span class="token operator">:</span><span class="token parameter">state</span> <span class="token operator">=></span> state<span class="token punctuation">.</span>count<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="Getter"><a href="#Getter" class="headerlink" title="Getter"></a>Getter</h4><p>Getter 用于对 Store中的数据进行加工处理形成新的数据。Getter <strong>不会修改 Store 中的原数据</strong>，它只起到一个包装器的作用，将Store中的数据加工后输出出来。</p><ol><li>Getter可以对 Store中已有的数据加工处理之后形成新的数据，类似Vue的计算属性。</li><li>Store中数据发生变化， Getter 的数据也会跟着变化。</li></ol><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">//定义 Getter</span><span class="token keyword">const</span> store <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vuex<span class="token punctuation">.</span>Store</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>  <span class="token literal-property property">state</span><span class="token operator">:</span><span class="token punctuation">&#123;</span><span class="token literal-property property">count</span><span class="token operator">:</span><span class="token number">0</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token literal-property property">getters</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token function">showNum</span><span class="token punctuation">(</span><span class="token parameter">state</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> <span class="token string">'当前最新的数量是【'</span> <span class="token operator">+</span> state<span class="token punctuation">.</span>count <span class="token operator">+</span> <span class="token string">'】'</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>方法：</strong></p><ol><li><p>通过this.$store.getters.名称 访问 <code>this.$store.getters.名称</code></p></li><li><p>mapGetters映射为计算属性 </p>   <pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> mapGetters <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'vuex'</span><span class="token literal-property property">computed</span><span class="token operator">:</span><span class="token punctuation">&#123;</span><span class="token operator">...</span><span class="token function">mapGetters</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'showNum'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h4 id="Mutation"><a href="#Mutation" class="headerlink" title="Mutation"></a>Mutation</h4><p>更改 Vuex 的 store 中的状态的唯一方法是提交 mutation。Vuex 中的 mutation 非常类似于事件：每个 mutation 都有一个字符串的**事件类型 (type)**和一个**回调函数 (handler)**。这个回调函数就是我们实际进行状态更改的地方，并且它会接受 state 作为第一个参数</p><p>mutation用于变更State中的数据，只有mutation里的函数，才有权力修改state的数据；mutation是同步操作</p><p>①只能通过 mutations变更 Store数据，不可以直接操作 Store中的数据。<br>②通过这种方式虽然操作起来稍微繁琐一些，但是可以集中监控所有数据的变化</p><p><strong>方法：</strong></p><ol><li>this.$store.commit() 触发mutations</li><li>通过刚才按需导入的mapMutation函数，映射为当前组件的methods函数。</li></ol><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// store</span><span class="token literal-property property">mutations</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>  <span class="token function">add</span><span class="token punctuation">(</span><span class="token parameter">state</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 变更状态</span>    state<span class="token punctuation">.</span>count<span class="token operator">++</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token function">sub</span><span class="token punctuation">(</span><span class="token parameter">state</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    state<span class="token punctuation">.</span>count<span class="token operator">--</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token function">addN</span><span class="token punctuation">(</span><span class="token parameter">state<span class="token punctuation">,</span> step</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 变更状态</span>    state<span class="token punctuation">.</span>count <span class="token operator">+=</span> step  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token function">subN</span><span class="token punctuation">(</span><span class="token parameter">state<span class="token punctuation">,</span> step</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    state<span class="token punctuation">.</span>count <span class="token operator">-=</span> step  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token comment">// 组件A</span><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> mapState<span class="token punctuation">,</span>mapMutations <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'vuex'</span><span class="token literal-property property">methods</span><span class="token operator">:</span><span class="token punctuation">&#123;</span>  <span class="token operator">...</span><span class="token function">mapMutations</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'sub'</span><span class="token punctuation">,</span><span class="token string">'subN'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token function">decrement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">// 调用 </span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">sub</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token function">decrementN</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">subN</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="Actions-专门处理异步操作"><a href="#Actions-专门处理异步操作" class="headerlink" title="Actions 专门处理异步操作"></a>Actions 专门处理异步操作</h4><p>Actions用于处理异步任务；如果通过异步操作变更数据，必须通过 Action,而不能使用Mutation,但是在 Action中还是要通过触发Mutation的方式间接变更数据。</p><blockquote><p> 注意： 在Actions 中不能直接修改 state中的数据，要通过 mutations修改。</p></blockquote><p><strong>方法：</strong></p><ol><li>this.$store.dispath 触发Actions</li></ol><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// 定义 Action</span><span class="token keyword">const</span> store <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vuex<span class="token punctuation">.</span>store</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>  <span class="token comment">// ...省略其他代码</span>  <span class="token literal-property property">mutations</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 只有 mutations中的函数才有权利修改 state。</span>    <span class="token comment">// 不能在 mutations里执行异步操作。</span>    <span class="token function">add</span><span class="token punctuation">(</span><span class="token parameter">state</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      state<span class="token punctuation">.</span>count<span class="token operator">++</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token literal-property property">actions</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 在Actions 中不能直接修改 state中的数据，要通过 mutations修改。</span>    <span class="token function">addAsync</span><span class="token punctuation">(</span><span class="token parameter">context</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>        context<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token string">'add'</span><span class="token punctuation">)</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token comment">//组件A</span><span class="token comment">// 触发 Action</span><span class="token literal-property property">methods</span><span class="token operator">:</span><span class="token punctuation">&#123;</span>  <span class="token function">handle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">// 触发 actions 的第一种方式</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>$store<span class="token punctuation">.</span><span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token string">'addAsync'</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li>mapActions 映射为方法</li></ol><ul><li><p>从Vuex中按需导入 mapActions 函数  <code>import &#123;mapActions&#125; from &#39;vuex&#39;</code></p></li><li><p>将指定的 actions 函数，映射为当前组件 methods 的方法。 </p> <pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token literal-property property">methods</span><span class="token operator">:</span><span class="token punctuation">&#123;</span>  <span class="token operator">...</span><span class="token function">mapActions</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'subAsync'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token function">decrementAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">subAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h4 id="Module"><a href="#Module" class="headerlink" title="Module"></a>Module</h4><p>由于使用单一状态树，应用的所有状态会集中到一个比较大的对象。当应用变得非常复杂时，store 对象就有可能变得相当臃肿。</p><p>为了解决以上问题，Vuex 允许我们将 store 分割成<strong>模块（module）</strong>。每个模块拥有自己的 state、mutation、action、getter、甚至是嵌套子模块——从上至下进行同样方式的分割</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> moduleA <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token function-variable function">state</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span><span class="token punctuation">&#123;</span> <span class="token operator">...</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token literal-property property">mutations</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span> <span class="token operator">...</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token literal-property property">actions</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span> <span class="token operator">...</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token literal-property property">getters</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span> <span class="token operator">...</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">const</span> moduleB <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token function-variable function">state</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span><span class="token punctuation">&#123;</span> <span class="token operator">...</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token literal-property property">mutations</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span> <span class="token operator">...</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token literal-property property">actions</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span> <span class="token operator">...</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">const</span> store <span class="token operator">=</span> <span class="token function">createStore</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>  <span class="token literal-property property">modules</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">a</span><span class="token operator">:</span> moduleA<span class="token punctuation">,</span>    <span class="token literal-property property">b</span><span class="token operator">:</span> moduleB  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>store<span class="token punctuation">.</span>state<span class="token punctuation">.</span>a <span class="token comment">// -> moduleA 的状态</span>store<span class="token punctuation">.</span>state<span class="token punctuation">.</span>b <span class="token comment">// -> moduleB 的状态</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>Module 详情参照<a href="https://vuex.vuejs.org/zh/guide/modules.html#%E6%A8%A1%E5%9D%97%E7%9A%84%E5%B1%80%E9%83%A8%E7%8A%B6%E6%80%81">官方文档</a></p></blockquote>]]></content:encoded>
      
      
      <category domain="http://zhezhe0723.github.io/categories/Vuex/">Vuex</category>
      
      
      <category domain="http://zhezhe0723.github.io/tags/Vue/">Vue</category>
      
      
      <comments>http://zhezhe0723.github.io/2022/07/02/vuex/#disqus_thread</comments>
      
    </item>
    
  </channel>
</rss>
